#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 5000
#define BUFFER_SIZE 1024

void handle_client(int client_socket) {
    char buffer[BUFFER_SIZE];
    int received_bytes;

    while ((received_bytes = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
        // Получение длины строки
        uint32_t string_length;
        memcpy(&string_length, buffer, sizeof(string_length));
        string_length = ntohl(string_length);  // Преобразуем из Big Endian

        // Получение строки
        char received_string[string_length + 1];
        memcpy(received_string, buffer + sizeof(string_length), string_length);
        received_string[string_length] = '\0';

        // Получение целого числа
        int32_t received_int;
        memcpy(&received_int, buffer + sizeof(string_length) + string_length, sizeof(received_int));
        received_int = ntohl(received_int);

        // Получение вещественного числа
        float received_float;
        memcpy(&received_float, buffer + sizeof(string_length) + string_length + sizeof(received_int), sizeof(received_float));
        uint32_t float_data = ntohl(*(uint32_t*)&received_float);
        received_float = *(float*)&float_data;

        printf("Received: String='%s', Int32=%d, Float32=%f\n", received_string, received_int, received_float);

        // Отправка подтверждения клиенту
        char ack[] = "Data received";
        send(client_socket, ack, sizeof(ack), 0);
    }

    close(client_socket);
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_addr_len = sizeof(client_addr);

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, 5) < 0) {
        perror("Listen failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    while ((client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_addr_len)) >= 0) {
        printf("Connection accepted\n");
        handle_client(client_socket);
    }

    close(server_socket);
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 5000

void send_data(int socket) {
    char string_data[] = "Hello, PLC";
    uint32_t string_length = htonl(strlen(string_data));
    int32_t int_data = htonl(12345);
    float float_data = 3.14f;
    uint32_t float_data_network;
    memcpy(&float_data_network, &float_data, sizeof(float_data));
    float_data_network = htonl(float_data_network);

    char buffer[1024];
    size_t offset = 0;

    // Копируем длину строки
    memcpy(buffer + offset, &string_length, sizeof(string_length));
    offset += sizeof(string_length);

    // Копируем строку
    memcpy(buffer + offset, string_data, strlen(string_data));
    offset += strlen(string_data);

    // Копируем целое число
    memcpy(buffer + offset, &int_data, sizeof(int_data));
    offset += sizeof(int_data);

    // Копируем вещественное число
    memcpy(buffer + offset, &float_data_network, sizeof(float_data_network));
    offset += sizeof(float_data_network);

    // Отправляем данные
    send(socket, buffer, offset, 0);

    // Ждём подтверждение
    char ack[1024];
    recv(socket, ack, sizeof(ack), 0);
    printf("Server response: %s\n", ack);
}

int main() {
    int client_socket;
    struct sockaddr_in server_addr;

    client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);
    inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr);

    if (connect(client_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    printf("Connected to server\n");
    send_data(client_socket);

    close(client_socket);
    return 0;
}

