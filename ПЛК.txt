#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 5000
#define BUFFER_SIZE 1024

void run_server() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_addr_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];
    int received_bytes;

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, 5) < 0) {
        perror("Listen failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    while ((client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_addr_len)) >= 0) {
        printf("Connection accepted\n");

        while ((received_bytes = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
            uint32_t string_length;
            memcpy(&string_length, buffer, sizeof(string_length));
            string_length = ntohl(string_length);

            char received_string[string_length + 1];
            memcpy(received_string, buffer + sizeof(string_length), string_length);
            received_string[string_length] = '\0';

            int32_t received_int;
            memcpy(&received_int, buffer + sizeof(string_length) + string_length, sizeof(received_int));
            received_int = ntohl(received_int);

            float received_float;
            memcpy(&received_float, buffer + sizeof(string_length) + string_length + sizeof(received_int), sizeof(received_float));
            uint32_t float_data = ntohl(*(uint32_t*)&received_float);
            received_float = *(float*)&float_data;

            printf("Received: String='%s', Int32=%d, Float32=%f\n", received_string, received_int, received_float);

            char ack[] = "Data received";
            send(client_socket, ack, sizeof(ack), 0);
        }

        close(client_socket);
    }

    close(server_socket);
}

void run_client(const char *server_ip) {
    int client_socket;
    struct sockaddr_in server_addr;

    client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    inet_pton(AF_INET, server_ip, &server_addr.sin_addr);

    if (connect(client_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    printf("Connected to server\n");

    char string_data[] = "Hello, PC";
    uint32_t string_length = htonl(strlen(string_data));
    int32_t int_data = htonl(67890);
    float float_data = 6.28f;
    uint32_t float_data_network;
    memcpy(&float_data_network, &float_data, sizeof(float_data));
    float_data_network = htonl(float_data_network);

    char buffer[1024];
    size_t offset = 0;

    memcpy(buffer + offset, &string_length, sizeof(string_length));
    offset += sizeof(string_length);
    memcpy(buffer + offset, string_data, strlen(string_data));
    offset += strlen(string_data);
    memcpy(buffer + offset, &int_data, sizeof(int_data));
    offset += sizeof(int_data);
    memcpy(buffer + offset, &float_data_network, sizeof(float_data_network));
    offset += sizeof(float_data_network);

    send(client_socket, buffer, offset, 0);

    char ack[1024];
    recv(client_socket, ack, sizeof(ack), 0);
    printf("Server response: %s\n", ack);

    close(client_socket);
}

int main(int argc, char *argv[]) {
    if (argc != 2 && argc != 3) {
        fprintf(stderr, "Usage: %s <server|client> [<server_ip>]\n", argv[0]);
        return EXIT_FAILURE;
    }

    if (strcmp(argv[1], "server") == 0) {
        run_server();
    } else if (strcmp(argv[1], "client") == 0) {
        if (argc != 3) {
            fprintf(stderr, "Client mode requires server IP\n");
            return EXIT_FAILURE;
        }
        run_client(argv[2]);
    } else {
        fprintf(stderr, "Invalid mode: %s\n", argv[1]);
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
