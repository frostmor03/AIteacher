#include <stdio.h> 
#include <netdb.h> 
#include <netinet/in.h> 
#include <stdlib.h> 
#include <string.h> 
#include <sys/socket.h> 
#include <sys/types.h> 
#include <unistd.h> // read(), write(), close()
#include <arpa/inet.h>
#define MAX 80 
#define PORT 8080 
#define SA struct sockaddr
  
void func(int connfd) 
{ 
    char buff[MAX]; 
    int n; 
    uint32_t number; // Для демонстрации пересылки целых чисел
  
    for (;;) { 
        bzero(buff, MAX); 
  
        // Чтение сообщения от клиента
        read(connfd, buff, sizeof(buff)); 
  
        // Преобразуем число из Big Endian в Little Endian
        memcpy(&number, buff, sizeof(number));
        number = ntohl(number);
  
        printf("From client: Received number: %u\n", number); 
        printf("To client: ");
  
        // Считываем число для отправки
        scanf("%u", &number);
        getchar(); // Считываем '\n' после ввода
  
        // Преобразуем число обратно в Big Endian
        uint32_t number_to_send = htonl(number);
        memcpy(buff, &number_to_send, sizeof(number_to_send));
  
        // Отправляем данные клиенту
        write(connfd, buff, sizeof(number_to_send));
  
        // Если клиент или сервер вводит "exit", завершаем связь
        if (strncmp("exit", buff, 4) == 0) { 
            printf("Server Exit...\n"); 
            break; 
        } 
    } 
} 
  
int main() 
{ 
    int sockfd, connfd, len; 
    struct sockaddr_in servaddr, cli; 
  
    // Создаем сокет
    sockfd = socket(AF_INET, SOCK_STREAM, 0); 
    if (sockfd == -1) { 
        printf("Socket creation failed...\n"); 
        exit(0); 
    } 
    else
        printf("Socket successfully created..\n"); 
    bzero(&servaddr, sizeof(servaddr)); 
  
    // Настраиваем IP и порт
    servaddr.sin_family = AF_INET; 
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY); 
    servaddr.sin_port = htons(PORT); 
  
    // Привязываем сокет
    if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) { 
        printf("Socket bind failed...\n"); 
        exit(0); 
    } 
    else
        printf("Socket successfully binded..\n"); 
  
    // Слушаем входящие соединения
    if ((listen(sockfd, 5)) != 0) { 
        printf("Listen failed...\n"); 
        exit(0); 
    } 
    else
        printf("Server listening..\n"); 
    len = sizeof(cli); 
  
    // Принимаем клиента
    connfd = accept(sockfd, (SA*)&cli, &len); 
    if (connfd < 0) { 
        printf("Server accept failed...\n"); 
        exit(0); 
    } 
    else
        printf("Server accepted the client...\n"); 
  
    // Общение с клиентом
    func(connfd); 
  
    // Закрываем сокет
    close(sockfd); 
} 
